[build-system]
requires = ["poetry-core >=1.8,<2"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
authors = [
    "pynetdicom contributors"
]
classifiers=[
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries",
]
description = "A Python implementation of the DICOM networking protocol"
documentation = "https://pydicom.github.io/pynetdicom"
homepage = "https://github.com/pydicom/pynetdicom"
include = [
    "pynetdicom/tests/cert_files/*",
    "pynetdicom/tests/dicom_files/*",
    "pynetdicom/apps/qrscp/default.ini",
    "pynetdicom/py.typed",
    "LICENCE",
]

keywords = ["dicom", "networking", "pydicom"]
license = "MIT"
maintainers = [
    "scaramallion <scaramallion@users.noreply.github.com>",
]
name = "pynetdicom"
readme = "README.rst"
version = "2.1.0"


[tool.poetry.dependencies]
pydicom = "~2.4"
python = "^3.10"

# Optional dependencies
asv = { version = "^0.6", optional = true }
black = { version = ">=23.1,<25.0", optional = true }
codespell = { version = "^2.2", optional = true }
coverage = { version = "^7.3", optional = true }
mypy = { version = "^1.7", optional = true }
numpydoc = { version = "^1.6", optional = true }
pyfakefs = { version = "^5.3", optional = true }
pytest = { version = "^7.4", optional = true }
pytest-cov = { version = "^4.1", optional = true }
ruff = { version = "0.1.5", optional = true }
sphinx = { version = "^7.2", optional = true }
sphinx-copybutton = { version = "^0.5", optional = true }
sphinx-rtd-theme = { version = "^1.3", optional = true }
sqlalchemy = { version = "^2.0", optional = true }

[tool.poetry.extras]
apps = ["sqlalchemy"]
dev = ["asv", "black", "codespell", "coverage", "mypy", "pyfakefs", "pytest", "pytest-cov", "ruff", "sqlalchemy"]
docs = ["numpydoc", "sphinx", "sphinx-copybutton", "sphinx-rtd-theme"]
tests = ["coverage", "pyfakefs", "pytest", "pytest-cov", "sqlalchemy"]

[tool.poetry.scripts]
echoscp = "pynetdicom.apps.echoscp.echoscp:main"
echoscu = "pynetdicom.apps.echoscu.echoscu:main"
findscu = "pynetdicom.apps.findscu.findscu:main"
getscu = "pynetdicom.apps.getscu.getscu:main"
movescu = "pynetdicom.apps.movescu.echoscp:main"
qrscp = "pynetdicom.apps.qrscp.qrscp:main"
storescp = "pynetdicom.apps.storescp.storescp:main"
storescu = "pynetdicom.apps.storescu.storescu:main"


[tool.black]
exclude = ".venv*|env*|build|/_.*_dict.py$"
force-exclude = ".venv*|env*|/_.*_dict.py$"


[tool.codespell]
ignore-words-list = "ddress,pres,requestor,requestors"
skip = "test*.py,docs*,build*,env*"


[tool.coverage.run]
omit = [
    "pynetdicom/tests/*",
    "pynetdicom/apps/*",
    "pydicom/*",
    "pydicom-main/*",
]


[tool.mypy]
python_version = "3.10"  # use the minimum supported Python version
exclude = [
    "pynetdicom/tests",
    "pynetdicom/apps",
    "pynetdicom/benchmarks",
]
files = "pynetdicom/"
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = false
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
include = ["pynetdicom/*.py"]

[tool.ruff.lint]
exclude = [
    "pynetdicom/apps/tests/*",
    "pynetdicom/tests/*",
    "pynetdicom/benchmarks/*",
    "build_tools/*",
    "docs/*",
]
