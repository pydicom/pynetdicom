[build-system]
requires = ["setuptools", "wheel"]
build_backend = "setuptools.build_meta"


[tool.coverage.run]
omit = [
    "pynetdicom/tests/*",
    "pynetdicom/apps/*",
    "pydicom/*",
    "pydicom-master/*",
]




[project.urls]
documentation = "https://pydicom.github.io/pynetdicom"
download = "https://github.com/pydicom/pynetdicom/archive/master.zip"
homepage = "https://github.com/pydicom/pynetdicom"
repository = "https://github.com/pydicom/pynetdicom"

[tool.poetry]
name = "pynetdicom"
version = "2.0.2"
description = "A Python implementation of the DICOM networking protocol, originally based on (legacy) pynetdicom."
authors = [ "Darcy Mason and contributors <darcymason@gmail.com>"]
license = "MIT"
readme = "README.rst"
packages = [{include = "pynetdicom"},{include = "pynetdicom/py.typed"}]
keywords = ["dicom, python, medical, imaging, radiotherapy"]
classifiers=[
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries"
]


[tool.mypy]
python_version = "3.10"
exclude = [
    "pynetdicom/tests",
    "pynetdicom/apps",
    "pynetdicom/benchmarks",
]
files = "pynetdicom/"
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = false
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.poetry.dependencies]
python = ">=3.7,<3.11"
pydicom = "^2.3.0"
typing-extensions = "*"

# ----- #
# Apps  #
# ----- #
sqlalchemy = { version =">=2.0", optional = true } # groups ["all", "tests", "dev" ]

# ------------- #
# Documentation #
# ------------- #
sphinx = { version = "<6", optional = true } # groups = ["all", "docs"]
sphinx-argparse = { version = "*", optional = true } # groups = ["all", "docs"]
sphinx_copybutton = { version = "*", optional = true } # groups = [ "all", "docs"]
sphinx_rtd_theme = { version = "*", optional = true } # groups = [ "all", "docs"]
# sphinx-ext-napoleon = { version = "*", optional = true }  # groups = ["all", "docs"]
# sphinx-book-theme = { version = "*", optional = true }   # groups = ["all", "docs", "doctests"]
# jupyter-book = { version = ">=0.12.0", optional = true } # groups = ["all", "docs"]
# networkx = { version = "*", optional = true }            # groups = ["all", "docs"]

# ----- #
# Tests #
# ----- #
pytest = { version = "*", optional = true }                 # groups = ["all", "tests"]
pytest-sugar = { version = "*", optional = true }           # groups = ["all", "tests"]
# hypothesis = { version = "<6", optional = true }          # groups = ["all", "tests"]
# astroid = { version = "*", optional = true }              # groups = ["all", "tests"]
# psutil = { version = "*", optional = true }               # groups = ["all", "tests"]
pylint = { version = "*", optional = true }                 # groups = ["all", "tests"]
pytest-rerunfailures = { version = "*", optional = true }   # groups = ["all", "tests"]
pytest-cov = { version = "*", optional = true }             # groups = ["all", "tests"]
coverage = { version = "*", optional = true }               # groups = ["all", "tests"]

# ---------------- #
# Development Only #
# ---------------- #
pre-commit = { version = "*", optional = true }      # groups = ["dev", "all"]
black = { version = ">=22.3.0", optional = true }     # groups = ["dev", "all", "propagate", "doctests"]
mypy = { version = "*", optional = true }            # groups = ["dev", "all"]
rope = { version = "*", optional = true }            # groups = ["dev", "all"]
doc8 = { version = "*", optional = true }            # groups = ["dev", "all"]
readme-renderer = { version = "*", optional = true } # groups = ["dev", "all"]
tabulate = { version = "*", optional = true }        # groups = ["dev", "all", "doctests"]
flake8 = { version = "*", optional = true }          # groups = ["dev', "all"]
codespell = { version = "*", optional = true }       # groups = ["dev", "all"]

[tool.poetry.extras]

dev = [
    "black", 
    "doc8", 
    "mypy", 
    "pre-commit", 
    "readme-renderer", 
    "rope", 
    "tabulate",
    "flake8",
    "codespell"
]


docs = [
    "pydicom",
    "sphinx",
    "sphinx-argparse",
    "sphinx-copybutton",
    "sphinx_rtd_theme",
]
doctests = ["black", "tabulate"]

tests = [
    "pylint",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "pytest-cov",
    "coverage",
]

all = [
    "pylint",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "pydicom",
    "sphinx-argparse",
    "black",
    "tabulate",
    "doc8", 
    "mypy",
    "pre-commit", 
    "readme-renderer", 
    "rope",
    "flake8",
    "sphinx",
    "sphinx-copybutton",
    "sphinx_rtd_theme",
    "setuptools",
    "typing-extensions",
    "sqlalchemy",
    "coverage",
    "codespell",
    "pytest-cov",
]